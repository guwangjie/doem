{"version":3,"sources":["webpack:///./node_modules/_@babel_runtime@7.9.2@@babel/runtime/helpers/esm/asyncToGenerator.js","webpack:///./src/views/permission/admin/admin_edit.vue?e53d","webpack:///src/views/permission/admin/admin_edit.vue","webpack:///./src/views/permission/admin/admin_edit.vue?ae97","webpack:///./src/views/permission/admin/admin_edit.vue","webpack:///./node_modules/_core-js@3.6.4@core-js/modules/es.object.to-string.js","webpack:///./node_modules/_core-js@3.6.4@core-js/internals/object-to-string.js","webpack:///./src/api/permission/admin.js","webpack:///./node_modules/_async@3.2.0@async/dist/async.mjs"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","ref","rules","ruleForm","model","callback","$$v","$set","expression","_l","item","index","id","_v","_s","role_name","on","$event","submitForm","resetForm","staticRenderFns","name","username","password","role_ids","is_service","$route","query","adminRoles","methods","formName","$refs","validate","valid","resetFields","component","TO_STRING_TAG_SUPPORT","redefine","toString","Object","prototype","unsafe","classof","module","exports","request","url","method","adminAdd","data","adminEdit","adminLst","params","adminDetail","adminDelete","callArgs","initialParams","pop","call","_defer","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","setImmediate$1","asyncify","func","isAsync","promise","handlePromise","result","e","invokeCallback","message","Error","Symbol","toStringTag","isAsyncGenerator","isAsyncIterable","obj","asyncIterator","wrapAsync","asyncFn","awaitify","arity","length","awaitable","cbArgs","applyEach","eachfn","fns","go","that","cb","concat","_asyncMap","arr","iteratee","results","counter","_iteratee","_","iterCb","v","isArrayLike","breakLoop","once","wrapper","callFn","assign","getIterator","coll","iterator","createArrayIterator","i","len","createES2015Iterator","next","createObjectIterator","okeys","keys","createIterator","onlyOnce","asyncEachOfLimit","generator","limit","canceled","awaiting","running","idx","replenish","iterDone","iterateeCallback","catch","handleError","eachOfLimit","RangeError","nextElem","looping","elem","eachOfLimit$1","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf","eachOfImplementation","eachOf$1","map","map$1","applyEach$1","eachOfSeries","eachOfSeries$1","mapSeries","mapSeries$1","applyEachSeries","PROMISE_SYMBOL","promiseCallback","res","rej","auto","tasks","concurrency","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","enqueueTask","task","push","runTask","processQueue","run","shift","addListener","taskName","taskListeners","taskComplete","forEach","taskCallback","safeResults","rkey","taskFn","checkForDeadlocks","currentTask","getDependents","dependent","Array","isArray","indexOf","dependencies","slice","remainingDependencies","dependencyName","join","FN_ARGS","ARROW_FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","parseParams","src","replace","match","split","trim","autoInject","newTasks","fnIsAsync","hasNoDeps","newTask","taskCb","newArgs","DLL","head","tail","node","prev","newNode","insertBefore","setInitial","insertAfter","removeLink","cur","testFn","curr","dll","queue","worker","payload","_worker","numRunning","workersList","events","drain","saturated","unsaturated","empty","event","handler","handleAndRemove","off","filter","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","q","started","_tasks","unshift","_createCB","l","splice","buffer","idle","_maybeDrain","eventMethod","isProcessing","paused","datum","remove","Math","min","defineProperties","writable","cargo","cargo$1","reduce","memo","x","reduce$1","seq","functions","_functions","newargs","nextargs","compose","reverse","mapLimit","mapLimit$1","concatLimit","val","mapResults","concatLimit$1","concat$1","concatSeries","concatSeries$1","constant","ignoredArgs","_createTester","check","getResult","testResult","testPassed","detect","bool","detect$1","detectLimit","detectLimit$1","detectSeries","detectSeries$1","consoleFunc","resultArgs","console","dir","doWhilst","test","_fn","_test","truth","doWhilst$1","doUntil","_withoutIndex","eachLimit","each","eachLimit$1","eachLimit$2","eachSeries","eachSeries$1","ensureAsync","sync","innerArgs","every","every$1","everyLimit","everyLimit$1","everySeries","everySeries$1","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter$1","filterLimit","filterLimit$1","filterSeries","filterSeries$1","forever","errback","forever$1","groupByLimit","hasOwnProperty","groupByLimit$1","groupBy","groupBySeries","log","mapValuesLimit","newObj","_defer$1","mapValuesLimit$1","mapValues","mapValuesSeries","memoize","hasher","queues","memoized","unmemoized","_parallel","parallel","parallelLimit","queue$1","items","Heap","heap","pushCount","Number","MIN_SAFE_INTEGER","p","smaller","parent","t","leftChi","percUp","top","percDown","j","y","priority","priorityQueue","race","TypeError","race$1","reduceRight","array","reversed","reflect","reflectCallback","retVal","reflectAll","reject$1","reject$2","rejectLimit","rejectLimit$1","rejectSeries","rejectSeries$1","constant$1","DEFAULT_TIMES","DEFAULT_INTERVAL","retry","opts","options","times","intervalFunc","parseTimes","_task","attempt","retryAttempt","errorFilter","acc","interval","retryable","series","some","Boolean","some$1","someLimit","someLimit$1","someSeries","someSeries$1","sortBy","criteria","comparator","left","right","sortBy$1","timeout","milliseconds","timer","timedOut","timeoutCallback","code","clearTimeout","range","size","timesLimit","count","n","timesSeries","transform","accumulator","k","tryEach","tryEach$1","unmemoize","whilst","rest","whilst$1","until","waterfall","taskIndex","nextTask","waterfall$1","cargoQueue","all","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","flatMap","flatMapLimit","flatMapSeries","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","during","doDuring"],"mappings":"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","file":"js/chunk-755b9cd1.5eaef458.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app-container admin_edit\"},[_c('el-row',{attrs:{\"type\":\"flex\",\"justify\":\"center\"}},[_c('el-col',{attrs:{\"xs\":24,\"md\":12}},[_c('el-form',{ref:\"ruleForm\",attrs:{\"rules\":_vm.rules,\"model\":_vm.ruleForm,\"label-position\":\"right\",\"label-width\":\"150px\"}},[_c('el-form-item',{attrs:{\"label\":\"账号名\",\"prop\":\"username\"}},[_c('el-input',{attrs:{\"placeholder\":\"账号名\"},model:{value:(_vm.ruleForm.username),callback:function ($$v) {_vm.$set(_vm.ruleForm, \"username\", $$v)},expression:\"ruleForm.username\"}})],1),_c('el-form-item',{attrs:{\"label\":\"密码\",\"prop\":\"password\"}},[_c('el-input',{attrs:{\"placeholder\":\"密码\"},model:{value:(_vm.ruleForm.password),callback:function ($$v) {_vm.$set(_vm.ruleForm, \"password\", $$v)},expression:\"ruleForm.password\"}})],1),_c('el-form-item',{attrs:{\"label\":\"角色\",\"prop\":\"role_ids\"}},[_c('el-checkbox-group',{model:{value:(_vm.ruleForm.role_ids),callback:function ($$v) {_vm.$set(_vm.ruleForm, \"role_ids\", $$v)},expression:\"ruleForm.role_ids\"}},_vm._l((_vm.adminRoles),function(item,index){return _c('el-checkbox',{key:index,attrs:{\"label\":item.id}},[_vm._v(\" \"+_vm._s(item.role_name)+\" \")])}),1)],1),_c('el-form-item',{attrs:{\"label\":\"客服功能\",\"prop\":\"is_service\"}},[_c('el-radio-group',{model:{value:(_vm.ruleForm.is_service),callback:function ($$v) {_vm.$set(_vm.ruleForm, \"is_service\", $$v)},expression:\"ruleForm.is_service\"}},[_c('el-radio',{attrs:{\"label\":\"1\"}},[_vm._v(\"开启\")]),_c('el-radio',{attrs:{\"label\":\"0\"}},[_vm._v(\"关闭\")])],1)],1),_c('el-form-item',[_c('el-button',{attrs:{\"type\":\"success\"},on:{\"click\":function($event){return _vm.submitForm('ruleForm')}}},[_vm._v(\"保存\")]),_c('el-button',{on:{\"click\":function($event){return _vm.resetForm('ruleForm')}}},[_vm._v(\"重置\")])],1)],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"app-container admin_edit\">\n    <el-row type=\"flex\" justify=\"center\">\n      <el-col :xs=\"24\" :md=\"12\">\n        <el-form\n          ref=\"ruleForm\"\n          :rules=\"rules\"\n          :model=\"ruleForm\"\n          label-position=\"right\"\n          label-width=\"150px\"\n        >\n          <el-form-item label=\"账号名\" prop=\"username\">\n            <el-input v-model=\"ruleForm.username\" placeholder=\"账号名\" />\n          </el-form-item>\n          <el-form-item label=\"密码\" prop=\"password\">\n            <el-input v-model=\"ruleForm.password\" placeholder=\"密码\" />\n          </el-form-item>\n          <el-form-item label=\"角色\" prop=\"role_ids\">\n            <el-checkbox-group v-model=\"ruleForm.role_ids\">\n              <el-checkbox\n                v-for=\"(item, index) in adminRoles\"\n                :label=\"item.id\"\n                :key=\"index\"\n              >\n                {{ item.role_name }}\n              </el-checkbox>\n            </el-checkbox-group>\n          </el-form-item>\n          <el-form-item label=\"客服功能\" prop=\"is_service\">\n            <el-radio-group v-model=\"ruleForm.is_service\">\n              <el-radio label=\"1\">开启</el-radio>\n              <el-radio label=\"0\">关闭</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"success\" @click=\"submitForm('ruleForm')\"\n              >保存</el-button\n            >\n            <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\n          </el-form-item>\n        </el-form>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n<script>\nimport { adminEdit, adminRoles, adminDetail } from '@/api/permission/admin'\nconst async = require('async')\nexport default {\n  name: 'AdminAdd',\n  data() {\n    return {\n      ruleForm: {\n        username: '',\n        password: '',\n        role_ids: [],\n        is_service: '0',\n        id: this.$route.query.id\n      },\n      adminRoles: [],\n      rules: {\n        username: [\n          { required: true, message: '请输入账号名', trigger: 'blur' },\n          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\n        ],\n        role_ids: [{ required: true, message: '请设置角色' }],\n        is_service: [{ required: true, message: '请设置客服功能' }]\n      }\n    }\n  },\n  async mounted() {\n    try {\n      await this.getAdminRoles()\n      await this.getAdminDetail()\n    } catch (e) {}\n  },\n  methods: {\n    getAdminRoles() {\n      return adminRoles()\n        .then(res => {\n          this.adminRoles = res.data\n        })\n        .catch(() => {})\n    },\n    getAdminDetail() {\n      return adminDetail({ id: this.ruleForm.id })\n        .then(res => {\n          this.ruleForm = res.data\n        })\n        .catch(() => {})\n    },\n    submitForm(formName) {\n      const _this = this\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          adminEdit(this.ruleForm)\n            .then(res => {\n              this.$message({\n                message: '保存成功',\n                type: 'success',\n                onClose: function() {\n                  _this.$router.push('/permission/admin/admin_lst')\n                }\n              })\n            })\n            .catch(() => {})\n        } else {\n          // console.log('error submit!!')\n          return false\n        }\n      })\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields()\n    }\n  }\n}\n</script>\n","import mod from \"-!../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./admin_edit.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./admin_edit.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./admin_edit.vue?vue&type=template&id=654251a3&\"\nimport script from \"./admin_edit.vue?vue&type=script&lang=js&\"\nexport * from \"./admin_edit.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar redefine = require('../internals/redefine');\nvar toString = require('../internals/object-to-string');\n\n// `Object.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nif (!TO_STRING_TAG_SUPPORT) {\n  redefine(Object.prototype, 'toString', toString, { unsafe: true });\n}\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classof = require('../internals/classof');\n\n// `Object.prototype.toString` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n  return '[object ' + classof(this) + ']';\n};\n","import request from '@/utils/request'\n\nexport function adminRoles() {\n  return request({\n    url: '/permission/adminRoles',\n    method: 'get'\n  })\n}\n\nexport function adminAdd(ruleForm) {\n  return request({\n    url: '/permission/adminAdd',\n    method: 'post',\n    data: ruleForm\n  })\n}\n\nexport function adminEdit(ruleForm) {\n  return request({\n    url: '/permission/adminEdit',\n    method: 'post',\n    data: ruleForm\n  })\n}\n\nexport function adminLst(params) {\n  return request({\n    url: '/permission/adminLst',\n    method: 'get',\n    params: params\n  })\n}\n\nexport function adminDetail(params) {\n  return request({\n    url: '/permission/adminDetail',\n    method: 'get',\n    params: params\n  })\n}\n\nexport function adminDelete(params) {\n  return request({\n    url: '/permission/adminDelete',\n    method: 'get',\n    params: params\n  })\n}\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    const src = func.toString().replace(STRIP_COMMENTS, '');\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        if (typeof console === 'object') {\n            if (err) {\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) {\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshirtAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = aync.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc[index] = item * 2\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(page, cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n"],"sourceRoot":""}